const chai = require('chai');const graphql = require('graphql');const url = `https://f1-graphql-server.herokuapp.com`;const request = require('supertest')(url);const categoryType = require('../graphql/schema/category');const should = chai.should();const expect = chai.expect;describe('Category Schema', () => {    it('it should have an id field of type ID', () => {        expect(categoryType.getFields()).to.have.property('id');        expect(categoryType.getFields().id.type).to.deep.equals(graphql.GraphQLID);    });    it('it should have a title field of type String', () => {        expect(categoryType.getFields()).to.have.property('title');        expect(categoryType.getFields().title.type).to.deep.equals(graphql.GraphQLString);    });    it('it should have a description field of type String', () => {        expect(categoryType.getFields()).to.have.property('description');        expect(categoryType.getFields().description.type).to.deep.equals(graphql.GraphQLString);    });    it('it should have an icon field of type String', () => {        expect(categoryType.getFields()).to.have.property('icon');        expect(categoryType.getFields().icon.type).to.deep.equals(graphql.GraphQLString);    });});describe('Category Query', () => {    let token;    before((done) => {        request.post('/graphql')            .send({ query: '{ login(email:"admin@test.com",password:"1111"){ token }}'})            .expect(200)            .end((err,res) => {                if (err) return done(err);                token = res.body.data.login.token;                done();            });    });    it('it should return (categoryAll)', (done) => {        request.post('/graphql')            .set('Authorization', `Bearer ${token}`)            .send({ query: '{ categoryAll { id, title, description, icon } }'})            .expect(200)            .end((err,res) => {                if (err) return done(err);                res.body.should.be.a('object');                res.body.data.categoryAll.should.be.a('array');                res.body.data.categoryAll[0].should.have.property('id');                res.body.data.categoryAll[0].should.have.property('title');                res.body.data.categoryAll[0].should.have.property('description');                res.body.data.categoryAll[0].should.have.property('icon');                done();            })    });    it('it should not return (category) without auth token', (done) => {        request.post('/graphql')            .send({ query: '{ category(id:"5dd0a8c6084bb372ff2e619b") { id } }'})            .expect(200)            .end((err,res) => {                if (err) return done(err);                res.body.errors.should.be.a('array');                res.body.errors[0].should.have.property('message').eql('Unauthenticated!');                done();            })    });    it('it should return (category) by id', (done) => {        request.post('/graphql')            .set('Authorization', `Bearer ${token}`)            .send({ query: '{ category(id:"5dd0a8c6084bb372ff2e619b") { id, title, description, icon } }'})            .expect(200)            .end((err,res) => {                if (err) return done(err);                res.body.should.be.a('object');                res.body.data.category.should.have.property('id');                res.body.data.category.should.have.property('title');                res.body.data.category.should.have.property('description');                res.body.data.category.should.have.property('icon');                done();            })    });});describe('Category Mutation', () => {    let idCategory;    let token;    before((done) => {        request.post('/graphql')            .send({ query: '{ login(email:"admin@test.com",password:"1111"){ token }}'})            .expect(200)            .end((err,res) => {                if (err) return done(err);                token = res.body.data.login.token;                done();            });    });    it('it should not return (addCategory) without auth token', (done) => {        request.post('/graphql')            .send({ query: `mutation{                                 addCategory(                                    title: "Test",                                     description: "Test",                                     icon: "Test"                                ) { id }                            }`})            .expect(200)            .end((err,res) => {                if (err) return done(err);                res.body.errors.should.be.a('array');                res.body.errors[0].should.have.property('message').eql('Unauthenticated!');                done();            })    });    it('it should return (addCategory)', (done) => {        request.post('/graphql')            .set('Authorization', `Bearer ${token}`)            .send({ query: `mutation{                                addCategory(                                    title: "Test",                                     description: "Test",                                     icon: "Test"                                ) { id, title, description, icon }                            }`})            .expect(200)            .end((err,res) => {                if (err) return done(err);                res.body.should.be.a('object');                res.body.data.addCategory.should.have.property('id');                res.body.data.addCategory.should.have.property('title');                res.body.data.addCategory.should.have.property('description');                res.body.data.addCategory.should.have.property('icon');                idCategory = res.body.data.addCategory.id;                done();            })    });    it('it should return (updateCategory)', (done) => {        request.post('/graphql')            .set('Authorization', `Bearer ${token}`)            .send({ query: `mutation{                                 updateCategory(                                    id: "${idCategory}",                                     title: "Test123",                                     description: "Test123",                                     icon: "Test123"                                ) { id, title, description, icon }                            }`})            .expect(200)            .end((err,res) => {                if (err) return done(err);                res.body.should.be.a('object');                res.body.data.updateCategory.should.have.property('id').eql(idCategory);                res.body.data.updateCategory.should.have.property('title').eql('Test123');                res.body.data.updateCategory.should.have.property('description').eql('Test123');                res.body.data.updateCategory.should.have.property('icon').eql('Test123');                done();            })    });    it('it should return (deleteCategory)', (done) => {        request.post('/graphql')            .set('Authorization', `Bearer ${token}`)            .send({ query: `mutation{                                deleteCategory(id: "${idCategory}"){ id, title, description, icon }                            }`})            .expect(200)            .end((err,res) => {                if (err) return done(err);                res.body.should.be.a('object');                res.body.data.deleteCategory.should.have.property('id').eql(idCategory);                res.body.data.deleteCategory.should.have.property('title');                res.body.data.deleteCategory.should.have.property('description');                res.body.data.deleteCategory.should.have.property('icon');                done();            })    });});