const chai = require('chai');const graphql = require('graphql');const url = `https://f1-graphql-server.herokuapp.com`;const request = require('supertest')(url);const invoiceType = require('../graphql/schema/invoice');const userType = require('../graphql/schema/user');const should = chai.should();const expect = chai.expect;describe('Invoice Schema', () => {    it('it should have an id field of type ID', () => {        expect(invoiceType.getFields()).to.have.property('id');        expect(invoiceType.getFields().id.type).to.deep.equals(graphql.GraphQLID);    });    it('it should have an invoicePrice field of type Float', () => {        expect(invoiceType.getFields()).to.have.property('invoicePrice');        expect(invoiceType.getFields().invoicePrice.type).to.deep.equals(graphql.GraphQLFloat);    });    it('it should have a staff field of type User', () => {        expect(invoiceType.getFields()).to.have.property('staff');        expect(invoiceType.getFields().staff.type).to.deep.equals(userType);    });    it('it should have a paymentMethod field of type String', () => {        expect(invoiceType.getFields()).to.have.property('paymentMethod');        expect(invoiceType.getFields().paymentMethod.type).to.deep.equals(graphql.GraphQLString);    });    it('it should have a created_at field of type String', () => {        expect(invoiceType.getFields()).to.have.property('created_at');        expect(invoiceType.getFields().created_at.type).to.deep.equals(graphql.GraphQLString);    });});describe('Invoice Query', () => {    let token;    before((done) => {        request.post('/graphql')            .send({ query: '{ login(email:"admin@test.com",password:"1111"){ token }}'})            .expect(200)            .end((err,res) => {                if (err) return done(err);                token = res.body.data.login.token;                done();            });    });    it('it should return (invoiceAll)', (done) => {        request.post('/graphql')            .set('Authorization', `Bearer ${token}`)            .send({ query: '{ invoiceAll { id, invoiceItems{ title, price }, invoicePrice, paymentMethod, created_at } }'})            .expect(200)            .end((err,res) => {                if (err) return done(err);                res.body.should.be.a('object');                res.body.data.invoiceAll.should.be.a('array');                res.body.data.invoiceAll[0].should.have.property('id');                res.body.data.invoiceAll[0].should.have.property('invoiceItems');                res.body.data.invoiceAll[0].should.have.property('invoicePrice');                res.body.data.invoiceAll[0].should.have.property('paymentMethod');                res.body.data.invoiceAll[0].should.have.property('created_at');                done();            })    });    it('it should not return (invoice) without auth token', (done) => {        request.post('/graphql')            .send({ query: '{ invoice(id:"5dee7356b9da600efce07d49") { id } }'})            .expect(200)            .end((err,res) => {                if (err) return done(err);                res.body.errors.should.be.a('array');                res.body.errors[0].should.have.property('message').eql('Unauthenticated!');                done();            })    });    it('it should return (invoice) by id', (done) => {        request.post('/graphql')            .set('Authorization', `Bearer ${token}`)            .send({ query: `{ invoice(id:"5dee7356b9da600efce07d49") {                         id, invoiceItems { title, price }, invoicePrice, paymentMethod, created_at                     }}`})            .expect(200)            .end((err,res) => {                if (err) return done(err);                res.body.should.be.a('object');                res.body.data.invoice.should.have.property('id');                res.body.data.invoice.should.have.property('invoiceItems');                res.body.data.invoice.should.have.property('invoicePrice');                res.body.data.invoice.should.have.property('paymentMethod');                res.body.data.invoice.should.have.property('created_at');                done();            })    });});describe('Invoice Mutation', () => {    let idInvoice;    let token;    before((done) => {        request.post('/graphql')            .send({ query: '{ login(email:"admin@test.com",password:"1111"){ token }}'})            .expect(200)            .end((err,res) => {                if (err) return done(err);                token = res.body.data.login.token;                done();            });    });    it('it should not return (addInvoice) without auth token', (done) => {        request.post('/graphql')            .send({ query: `mutation{                                 addInvoice(                                  invoiceItems: [{title: "Test", price: 1}]                                  invoicePrice: 1                                  staff: "5dd0713430a9086cae1b76b4"                                  paymentMethod: "Test"                                  created_at: "Thu Dec 26 2019 14:29:29 GMT+0200 (Восточная Европа, стандартное время)"                                ) {                                    id,                                    invoicePrice,                                    paymentMethod,                                    created_at                                }                                }`})            .expect(200)            .end((err,res) => {                if (err) return done(err);                res.body.errors.should.be.a('array');                res.body.errors[0].should.have.property('message').eql('Unauthenticated!');                done();            })    });    it('it should return (addInvoice)', (done) => {        request.post('/graphql')            .set('Authorization', `Bearer ${token}`)            .send({ query: `mutation{                                addInvoice(                                  invoiceItems: [{title: "Test", price: 1}]                                  invoicePrice: 1                                  staff: "5dd0713430a9086cae1b76b4"                                  paymentMethod: "Test"                                  created_at: "Thu Dec 26 2019 14:29:29 GMT+0200 (Восточная Европа, стандартное время)"                                ) {                                    id,                                    invoicePrice,                                    paymentMethod,                                    created_at                                }                            }`})            .expect(200)            .end((err,res) => {                if (err) return done(err);                res.body.should.be.a('object');                res.body.data.addInvoice.should.have.property('id');                res.body.data.addInvoice.should.have.property('invoicePrice');                res.body.data.addInvoice.should.have.property('paymentMethod');                res.body.data.addInvoice.should.have.property('created_at');                idInvoice = res.body.data.addInvoice.id;                done();            })    });    it('it should return (updateInvoice)', (done) => {        request.post('/graphql')            .set('Authorization', `Bearer ${token}`)            .send({ query: `mutation{                                updateInvoice(                                  id: "${idInvoice}",                                  invoiceItems: [{title: "Test", price: 1}]                                  invoicePrice: 111                                  staff: "5dd0713430a9086cae1b76b4"                                  paymentMethod: "Test123"                                  created_at: "Thu Dec 26 2019 14:29:29 GMT+0200 (Восточная Европа, стандартное время)"                                ) {                                    id,                                    invoicePrice,                                    paymentMethod,                                    created_at                                }                            }`})            .expect(200)            .end((err,res) => {                if (err) return done(err);                res.body.should.be.a('object');                res.body.data.updateInvoice.should.have.property('id').eql(idInvoice);                res.body.data.updateInvoice.should.have.property('invoicePrice').eql(111);                res.body.data.updateInvoice.should.have.property('paymentMethod').eql('Test123');                res.body.data.updateInvoice.should.have.property('created_at');                done();            })    });    it('it should return (deleteInvoice)', (done) => {        request.post('/graphql')            .set('Authorization', `Bearer ${token}`)            .send({ query: `mutation{                                deleteInvoice(id: "${idInvoice}"){                                    id,                                    invoicePrice,                                    paymentMethod,                                    created_at                                }                            }`})            .expect(200)            .end((err,res) => {                if (err) return done(err);                res.body.should.be.a('object');                res.body.data.deleteInvoice.should.have.property('id').eql(idInvoice);                res.body.data.deleteInvoice.should.have.property('invoicePrice');                res.body.data.deleteInvoice.should.have.property('paymentMethod');                res.body.data.deleteInvoice.should.have.property('created_at');                done();            })    });});