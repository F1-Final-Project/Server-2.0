const chai = require('chai');const graphql = require('graphql');const url = `https://f1-graphql-server.herokuapp.com`;const request = require('supertest')(url);const ingredientType = require('../graphql/schema/ingredient');const should = chai.should();const expect = chai.expect;describe('User Schema', () => {    it('it should have an id field of type ID', () => {        expect(ingredientType.getFields()).to.have.property('id');        expect(ingredientType.getFields().id.type).to.deep.equals(graphql.GraphQLID);    });    it('it should have a title field of type String', () => {        expect(ingredientType.getFields()).to.have.property('title');        expect(ingredientType.getFields().title.type).to.deep.equals(graphql.GraphQLString);    });    it('it should have a restInStock field of type Int', () => {        expect(ingredientType.getFields()).to.have.property('restInStock');        expect(ingredientType.getFields().restInStock.type).to.deep.equals(graphql.GraphQLInt);    });    it('it should have a description field of type String', () => {        expect(ingredientType.getFields()).to.have.property('description');        expect(ingredientType.getFields().description.type).to.deep.equals(graphql.GraphQLString);    });    it('it should have a price field of type Int', () => {        expect(ingredientType.getFields()).to.have.property('price');        expect(ingredientType.getFields().price.type).to.deep.equals(graphql.GraphQLInt);    });});describe('Ingredient Query', () => {    let token;    before((done) => {        request.post('/graphql')            .send({ query: '{ login(email:"admin@test.com",password:"1111"){ token }}'})            .expect(200)            .end((err,res) => {                if (err) return done(err);                token = res.body.data.login.token;                done();            });    });    it('it should return (ingredientAll)', (done) => {        request.post('/graphql')            .set('Authorization', `Bearer ${token}`)            .send({ query: '{ ingredientAll { id, title, restInStock, description, price } }'})            .expect(200)            .end((err,res) => {                if (err) return done(err);                res.body.should.be.a('object');                res.body.data.ingredientAll.should.be.a('array');                res.body.data.ingredientAll[0].should.have.property('id');                res.body.data.ingredientAll[0].should.have.property('title');                res.body.data.ingredientAll[0].should.have.property('restInStock');                res.body.data.ingredientAll[0].should.have.property('description');                res.body.data.ingredientAll[0].should.have.property('price');                done();            })    });    it('it should not return (ingredient) without auth token', (done) => {        request.post('/graphql')            .send({ query: '{ ingredient(id:"5dd1aeaa1c9d440000c0d811") { id } }'})            .expect(200)            .end((err,res) => {                if (err) return done(err);                res.body.errors.should.be.a('array');                res.body.errors[0].should.have.property('message').eql('Unauthenticated!');                done();            })    });    it('it should return (ingredient) by id', (done) => {        request.post('/graphql')            .set('Authorization', `Bearer ${token}`)            .send({ query: '{ ingredient(id:"5dd1aeaa1c9d440000c0d811") { id, title, restInStock, description, price } }'})            .expect(200)            .end((err,res) => {                if (err) return done(err);                res.body.should.be.a('object');                res.body.data.ingredient.should.have.property('id');                res.body.data.ingredient.should.have.property('title');                res.body.data.ingredient.should.have.property('restInStock');                res.body.data.ingredient.should.have.property('description');                res.body.data.ingredient.should.have.property('price');                done();            })    });});describe('Ingredient Mutation', () => {    let idIngredient;    let token;    before((done) => {        request.post('/graphql')            .send({ query: '{ login(email:"admin@test.com",password:"1111"){ token }}'})            .expect(200)            .end((err,res) => {                if (err) return done(err);                token = res.body.data.login.token;                done();            });    });    it('it should not return (addIngredient) without auth token', (done) => {        request.post('/graphql')            .send({ query: `mutation{                                 addIngredient(                                    title: "Test",                                    restInStock: 1,                                    description: "Test",                                    price: 1                                ) { id, title, restInStock, description, price }                            }`})            .expect(200)            .end((err,res) => {                if (err) return done(err);                res.body.errors.should.be.a('array');                res.body.errors[0].should.have.property('message').eql('Unauthenticated!');                done();            })    });    it('it should return (addIngredient)', (done) => {        request.post('/graphql')            .set('Authorization', `Bearer ${token}`)            .send({ query: `mutation{                                addIngredient(                                    title: "Test",                                    restInStock: 1,                                    description: "Test",                                    price: 1                                ) { id, title, restInStock, description, price }                            }`})            .expect(200)            .end((err,res) => {                if (err) return done(err);                res.body.should.be.a('object');                res.body.data.addIngredient.should.have.property('id');                res.body.data.addIngredient.should.have.property('title').eql('Test');                res.body.data.addIngredient.should.have.property('restInStock').eql(1);                res.body.data.addIngredient.should.have.property('description').eql('Test');                res.body.data.addIngredient.should.have.property('price').eql(1);                idIngredient = res.body.data.addIngredient.id;                done();            })    });    it('it should return (updateIngredient)', (done) => {        request.post('/graphql')            .set('Authorization', `Bearer ${token}`)            .send({ query: `mutation{                                updateIngredient(                                    id: "${idIngredient}",                                    title: "Test123",                                    restInStock: 111,                                    description: "Test123",                                    price: 111                                ) { id, title, restInStock, description, price }                            }`})            .expect(200)            .end((err,res) => {                if (err) return done(err);                res.body.should.be.a('object');                res.body.data.updateIngredient.should.have.property('id').eql(idIngredient);                res.body.data.updateIngredient.should.have.property('title').eql('Test123');                res.body.data.updateIngredient.should.have.property('restInStock').eql(111);                res.body.data.updateIngredient.should.have.property('description').eql('Test123');                res.body.data.updateIngredient.should.have.property('price').eql(111);                done();            })    });    it('it should return (deleteIngredient)', (done) => {        request.post('/graphql')            .set('Authorization', `Bearer ${token}`)            .send({ query: `mutation{                                deleteIngredient(id: "${idIngredient}"){                                    id,                                    title,                                    restInStock,                                    description,                                    price                                }                            }`})            .expect(200)            .end((err,res) => {                if (err) return done(err);                res.body.should.be.a('object');                res.body.data.deleteIngredient.should.have.property('id').eql(idIngredient);                res.body.data.deleteIngredient.should.have.property('title');                res.body.data.deleteIngredient.should.have.property('restInStock');                res.body.data.deleteIngredient.should.have.property('description');                res.body.data.deleteIngredient.should.have.property('price');                done();            })    });});