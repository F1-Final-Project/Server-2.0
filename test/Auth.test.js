const chai = require('chai');const graphql = require('graphql');const url = `https://f1-graphql-server.herokuapp.com`;const request = require('supertest')(url);const authType = require('../graphql/schema/auth');const should = chai.should();const expect = chai.expect;describe('Auth Schema', () => {    it('it should have an id field of type String', () => {        expect(authType.getFields()).to.have.property('id');        expect(authType.getFields().id.type).to.deep.equals(graphql.GraphQLString);    });    it('it should have a token field of type String', () => {        expect(authType.getFields()).to.have.property('token');        expect(authType.getFields().token.type).to.deep.equals(graphql.GraphQLString);    });    it('it should have a permission field of type String', () => {        expect(authType.getFields()).to.have.property('permission');        expect(authType.getFields().permission.type).to.deep.equals(graphql.GraphQLString);    });});describe('Auth Query', () => {    it('it should return (login) - permission admin', (done) => {        request.post('/graphql')            .send({ query: '{ login(email:"admin@test.com",password:"1111"){ id, token, permission } }'})            .expect(200)            .end((err,res) => {                if (err) return done(err);                res.body.should.be.a('object');                res.body.data.login.should.have.property('id');                res.body.data.login.should.have.property('token');                res.body.data.login.should.have.property('permission').eql('admin');                done();            })    });    it('it should return (login) - permission cook', (done) => {        request.post('/graphql')            .send({ query: '{ login(email:"cook@test.com",password:"1111"){ id, token, permission } }'})            .expect(200)            .end((err,res) => {                if (err) return done(err);                res.body.should.be.a('object');                res.body.data.login.should.have.property('id');                res.body.data.login.should.have.property('token');                res.body.data.login.should.have.property('permission').eql('cook');                done();            })    });    it('it should return (login) - permission waiter', (done) => {        request.post('/graphql')            .send({ query: '{ login(email:"waiter@test.com",password:"1111"){ id, token, permission } }'})            .expect(200)            .end((err,res) => {                if (err) return done(err);                res.body.should.be.a('object');                res.body.data.login.should.have.property('id');                res.body.data.login.should.have.property('token');                res.body.data.login.should.have.property('permission').eql('waiter');                done();            })    });});