const chai = require('chai');const graphql = require('graphql');const url = `https://f1-graphql-server.herokuapp.com`;const request = require('supertest')(url);const orderType = require('../graphql/schema/order');const userType = require('../graphql/schema/user');const should = chai.should();const expect = chai.expect;describe('Order Schema', () => {    it('it should have an id field of type ID', () => {        expect(orderType.getFields()).to.have.property('id');        expect(orderType.getFields().id.type).to.deep.equals(graphql.GraphQLID);    });    it('it should have a staff field of type User', () => {        expect(orderType.getFields()).to.have.property('staff');        expect(orderType.getFields().staff.type).to.deep.equals(userType);    });    it('it should have a table field of type Int', () => {        expect(orderType.getFields()).to.have.property('table');        expect(orderType.getFields().table.type).to.deep.equals(graphql.GraphQLInt);    });    it('it should have an orderPrice field of type Float', () => {        expect(orderType.getFields()).to.have.property('orderPrice');        expect(orderType.getFields().orderPrice.type).to.deep.equals(graphql.GraphQLFloat);    });    it('it should have an onKitchen field of type Boolean', () => {        expect(orderType.getFields()).to.have.property('onKitchen');        expect(orderType.getFields().onKitchen.type).to.deep.equals(graphql.GraphQLBoolean);    });    it('it should have a completed field of type Boolean', () => {        expect(orderType.getFields()).to.have.property('completed');        expect(orderType.getFields().completed.type).to.deep.equals(graphql.GraphQLBoolean);    });    it('it should have a created_at field of type String', () => {        expect(orderType.getFields()).to.have.property('created_at');        expect(orderType.getFields().created_at.type).to.deep.equals(graphql.GraphQLString);    });    it('it should have a updated_at field of type String', () => {        expect(orderType.getFields()).to.have.property('updated_at');        expect(orderType.getFields().updated_at.type).to.deep.equals(graphql.GraphQLString);    });});describe('Order Query', () => {    let token;    before((done) => {        request.post('/graphql')            .send({ query: '{ login(email:"admin@test.com",password:"1111"){ token }}'})            .expect(200)            .end((err,res) => {                if (err) return done(err);                token = res.body.data.login.token;                done();            });    });    it('it should return (orderAll)', (done) => {        request.post('/graphql')            .set('Authorization', `Bearer ${token}`)            .send({ query: '{ orderAll { id, onKitchen, completed }}'})            .expect(200)            .end((err,res) => {                if (err) return done(err);                res.body.should.be.a('object');                res.body.data.orderAll.should.be.a('array');                res.body.data.orderAll[0].should.have.property('id');                res.body.data.orderAll[0].should.have.property('onKitchen');                res.body.data.orderAll[0].should.have.property('completed');                done();            })    });    it('it should not return (order) without auth token', (done) => {        request.post('/graphql')            .send({ query: '{ order(id:"5dd0713430a9086cae1b76b4") { id } }'})            .expect(200)            .end((err,res) => {                if (err) return done(err);                res.body.errors.should.be.a('array');                res.body.errors[0].should.have.property('message').eql('Unauthenticated!');                done();            })    });    it('it should return (order) by id', (done) => {        request.post('/graphql')            .set('Authorization', `Bearer ${token}`)            .send({ query: `{ order(id:"5e0124523bd0d939d4cab577") {                             id, onKitchen, completed                         }}`})            .expect(200)            .end((err,res) => {                if (err) return done(err);                res.body.should.be.a('object');                res.body.data.order.should.have.property('id');                res.body.data.order.should.have.property('onKitchen');                res.body.data.order.should.have.property('completed');                done();            })    });});describe('Order Mutation', () => {    let idOrder;    let token;    before((done) => {        request.post('/graphql')            .send({ query: '{ login(email:"admin@test.com",password:"1111"){ token }}'})            .expect(200)            .end((err,res) => {                if (err) return done(err);                token = res.body.data.login.token;                done();            });    });    it('it should not return (addOrder) without auth token', (done) => {        request.post('/graphql')            .send({ query: `mutation{                                addOrder(staff: "5dd0713430a9086cae1b76b4"                                        table: 1                                        orderItems: [{                                          title: "Test"                                          description: "Test"                                          ingredients: ["5dd1a9e91c9d440000c0d80d"]                                          additionalIngredients: ["5dd1a9e91c9d440000c0d80d"]                                          price: 1                                          weight: 1                                        }]                                        newOrderItems: [{                                          title: "Test"                                          description: "Test"                                          ingredients: ["5dd1a9e91c9d440000c0d80d"]                                          additionalIngredients: ["5dd1a9e91c9d440000c0d80d"]                                          price: 1                                          weight: 1                                        }]                                        orderPrice: 1                                        onKitchen: false                                        completed: false                                        created_at: "Thu Dec 26 2019 12:56:23 GMT+0200 (Восточная Европа, стандартное время)"                                        updated_at: "Thu Dec 26 2019 12:56:23 GMT+0200 (Восточная Европа, стандартное время)"                                ) {                                    id, table, orderPrice, onKitchen, completed                                }                            }`})            .expect(200)            .end((err,res) => {                if (err) return done(err);                res.body.errors.should.be.a('array');                res.body.errors[0].should.have.property('message').eql('Unauthenticated!');                done();            })    });    it('it should return (addOrder)', (done) => {        request.post('/graphql')            .set('Authorization', `Bearer ${token}`)            .send({ query: `mutation{                                addOrder(staff: "5dd0713430a9086cae1b76b4"                                        table: 1                                        orderItems: [{                                          title: "Test"                                          description: "Test"                                          ingredients: ["5dd1a9e91c9d440000c0d80d"]                                          additionalIngredients: ["5dd1a9e91c9d440000c0d80d"]                                          price: 1                                          weight: 1                                        }]                                        newOrderItems: [{                                          title: "Test"                                          description: "Test"                                          ingredients: ["5dd1a9e91c9d440000c0d80d"]                                          additionalIngredients: ["5dd1a9e91c9d440000c0d80d"]                                          price: 1                                          weight: 1                                        }]                                        orderPrice: 1                                        onKitchen: false                                        completed: false                                                                     ) {                                    id, table, orderPrice, onKitchen, completed                                }                            }`})            .expect(200)            .end((err,res) => {                if (err) return done(err);                res.body.should.be.a('object');                res.body.data.addOrder.should.have.property('id');                res.body.data.addOrder.should.have.property('table').eql(1);                res.body.data.addOrder.should.have.property('orderPrice').eql(1);                res.body.data.addOrder.should.have.property('onKitchen').eql(false);                res.body.data.addOrder.should.have.property('completed').eql(false);                idOrder = res.body.data.addOrder.id;                done();            })    });    it('it should return (updateOrder)', (done) => {        request.post('/graphql')            .set('Authorization', `Bearer ${token}`)            .send({ query: `mutation{                                updateOrder(id: "${idOrder}",                                        staff: "5dd0713430a9086cae1b76b4"                                        table: 111                                        orderItems: [{                                          title: "Test"                                          description: "Test"                                          ingredients: ["5dd1a9e91c9d440000c0d80d"]                                          additionalIngredients: ["5dd1a9e91c9d440000c0d80d"]                                          price: 1                                          weight: 1                                        }]                                        newOrderItems: [{                                          title: "Test"                                          description: "Test"                                          ingredients: ["5dd1a9e91c9d440000c0d80d"]                                          additionalIngredients: ["5dd1a9e91c9d440000c0d80d"]                                          price: 1                                          weight: 1                                        }]                                        orderPrice: 111                                        onKitchen: true                                        completed: true                                        created_at: "Thu Dec 26 2019 12:56:23 GMT+0200 (Восточная Европа, стандартное время)"                                        updated_at: "Thu Dec 26 2019 12:56:23 GMT+0200 (Восточная Европа, стандартное время)"                                ) {                                    id, table, orderPrice, onKitchen, completed                                }                            }`})            .expect(200)            .end((err,res) => {                if (err) return done(err);                res.body.should.be.a('object');                res.body.data.updateOrder.should.have.property('id').eql(idOrder);                res.body.data.updateOrder.should.have.property('table').eql(111);                res.body.data.updateOrder.should.have.property('orderPrice').eql(111);                res.body.data.updateOrder.should.have.property('onKitchen').eql(true);                res.body.data.updateOrder.should.have.property('completed').eql(true);                done();            })    });    it('it should return (deleteOrder)', (done) => {        console.log(idOrder);        request.post('/graphql')            .set('Authorization', `Bearer ${token}`)            .send({ query: `mutation{                                deleteOrder(id: "${idOrder}"){                                    id, table, orderPrice, onKitchen, completed                                }                            }`})            .expect(200)            .end((err,res) => {                if (err) return done(err);                res.body.should.be.a('object');                res.body.data.deleteOrder.should.have.property('id').eql(idOrder);                res.body.data.deleteOrder.should.have.property('table');                res.body.data.deleteOrder.should.have.property('orderPrice');                res.body.data.deleteOrder.should.have.property('onKitchen');                res.body.data.deleteOrder.should.have.property('completed');                done();            })    });});