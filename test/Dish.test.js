const chai = require('chai');const graphql = require('graphql');const url = `https://f1-graphql-server.herokuapp.com`;const request = require('supertest')(url);const dishType = require('../graphql/schema/dish');const categoryType = require('../graphql/schema/category');const ingredientType = require('../graphql/schema/ingredient');const should = chai.should();const expect = chai.expect;describe('Dish Schema', () => {    it('it should have an id field of type ID', () => {        expect(dishType.getFields()).to.have.property('id');        expect(dishType.getFields().id.type).to.deep.equals(graphql.GraphQLID);    });    it('it should have a title field of type String!', () => {        expect(dishType.getFields()).to.have.property('title');        expect(dishType.getFields().title.type).to.deep.equals(graphql.GraphQLNonNull(graphql.GraphQLString));    });    it('it should have a description field of type String', () => {        expect(dishType.getFields()).to.have.property('description');        expect(dishType.getFields().description.type).to.deep.equals(graphql.GraphQLString);    });    it('it should have an img field of type String', () => {        expect(dishType.getFields()).to.have.property('img');        expect(dishType.getFields().img.type).to.deep.equals(graphql.GraphQLString);    });    it('it should have a category field of type Category', () => {        expect(dishType.getFields()).to.have.property('category');        expect(dishType.getFields().category.type).to.deep.equals(categoryType);    });    it('it should have a ingredients field of type Array Ingredient', () => {        expect(dishType.getFields()).to.have.property('ingredients');        expect(dishType.getFields().ingredients.type).to.deep.equals(graphql.GraphQLList(ingredientType));    });    it('it should have a additionalIngredients field of type Array Ingredient', () => {        expect(dishType.getFields()).to.have.property('additionalIngredients');        expect(dishType.getFields().additionalIngredients.type).to.deep.equals(graphql.GraphQLList(ingredientType));    });    it('it should have a price field of type Float', () => {        expect(dishType.getFields()).to.have.property('price');        expect(dishType.getFields().price.type).to.deep.equals(graphql.GraphQLFloat);    });    it('it should have a weight field of type Float', () => {        expect(dishType.getFields()).to.have.property('weight');        expect(dishType.getFields().weight.type).to.deep.equals(graphql.GraphQLFloat);    });});describe('Dish Query', () => {    let token;    before((done) => {        request.post('/graphql')            .send({ query: '{ login(email:"admin@test.com",password:"1111"){ token }}'})            .expect(200)            .end((err,res) => {                if (err) return done(err);                token = res.body.data.login.token;                done();            });    });    it('it should return (dishAll)', (done) => {        request.post('/graphql')            .set('Authorization', `Bearer ${token}`)            .send({ query: '{ dishAll { id, title, description, img, price, weight } }'})            .expect(200)            .end((err,res) => {                if (err) return done(err);                res.body.should.be.a('object');                res.body.data.dishAll.should.be.a('array');                res.body.data.dishAll[0].should.have.property('id');                res.body.data.dishAll[0].should.have.property('title');                res.body.data.dishAll[0].should.have.property('description');                res.body.data.dishAll[0].should.have.property('img');                res.body.data.dishAll[0].should.have.property('price');                res.body.data.dishAll[0].should.have.property('weight');                done();            })    });    it('it should not return (dish) without auth token', (done) => {        request.post('/graphql')            .send({ query: '{ dish(id:"5dea30b21c9d4400008e8b39") { id } }'})            .expect(200)            .end((err,res) => {                if (err) return done(err);                res.body.errors.should.be.a('array');                res.body.errors[0].should.have.property('message').eql('Unauthenticated!');                done();            })    });    it('it should return (dish) by id', (done) => {        request.post('/graphql')            .set('Authorization', `Bearer ${token}`)            .send({ query: '{ dish(id:"5dea30b21c9d4400008e8b39") { id, title, description, img, price, weight } }'})            .expect(200)            .end((err,res) => {                if (err) return done(err);                res.body.should.be.a('object');                res.body.data.dish.should.have.property('id');                res.body.data.dish.should.have.property('title');                res.body.data.dish.should.have.property('description');                res.body.data.dish.should.have.property('img');                res.body.data.dish.should.have.property('price');                res.body.data.dish.should.have.property('weight');                done();            })    });});describe('Dish Mutation', () => {    let idDish;    let token;    before((done) => {        request.post('/graphql')            .send({ query: '{ login(email:"admin@test.com",password:"1111"){ token }}'})            .expect(200)            .end((err,res) => {                if (err) return done(err);                token = res.body.data.login.token;                done();            });    });    it('it should not return (addDish) without auth token', (done) => {        request.post('/graphql')            .send({ query: `mutation{                                 addDish(                                    title: "Test",                                    description: "Test",                                    img: "Test",                                    category: "5dd0a8c6084bb372ff2e619b",                                    ingredients: ["5dd099be0cdb777077a0bec5"],                                    additionalIngredients: ["5dd099be0cdb777077a0bec5"],                                    price: 1,                                    weight: 1                                ) { id }                             }`})            .expect(200)            .end((err,res) => {                if (err) return done(err);                res.body.errors.should.be.a('array');                res.body.errors[0].should.have.property('message').eql('Unauthenticated!');                done();            })    });    it('it should return (addDish)', (done) => {        request.post('/graphql')            .set('Authorization', `Bearer ${token}`)            .send({ query: `mutation{                                addDish(                                    title: "Test",                                    description: "Test",                                    img: "Test",                                    category: "5dd0a8c6084bb372ff2e619b",                                    ingredients: ["5dd099be0cdb777077a0bec5"],                                    additionalIngredients: ["5dd099be0cdb777077a0bec5"],                                    price: 1,                                    weight: 1                                ) {                                    id,                                    title,                                    img,                                    price,                                    weight                                }                            }`})            .expect(200)            .end((err,res) => {                if (err) return done(err);                res.body.should.be.a('object');                res.body.data.addDish.should.have.property('id');                res.body.data.addDish.should.have.property('title').eql('Test');                res.body.data.addDish.should.have.property('img').eql('Test');                res.body.data.addDish.should.have.property('price').eql(1);                res.body.data.addDish.should.have.property('weight').eql(1);                idDish = res.body.data.addDish.id;                done();            })    });    it('it should return (updateDish)', (done) => {        request.post('/graphql')            .set('Authorization', `Bearer ${token}`)            .send({ query: `mutation{                                updateDish(                                    id: "${idDish}",                                    title: "Test123",                                    description: "Test123",                                    img: "Test123",                                    category: "5dd0a8c6084bb372ff2e619b",                                    ingredients: ["5dd099be0cdb777077a0bec5"],                                    additionalIngredients: ["5dd099be0cdb777077a0bec5"],                                    price: 111,                                    weight: 111                                   ) {                                    id,                                    title,                                    img,                                    price,                                    weight                                }                            }`})            .expect(200)            .end((err,res) => {                if (err) return done(err);                res.body.should.be.a('object');                res.body.data.updateDish.should.have.property('id').eql(idDish);                res.body.data.updateDish.should.have.property('title').eql('Test123');                res.body.data.updateDish.should.have.property('img').eql('Test123');                res.body.data.updateDish.should.have.property('price').eql(111);                res.body.data.updateDish.should.have.property('weight').eql(111);                done();            })    });    it('it should return (deleteDish)', (done) => {        request.post('/graphql')            .set('Authorization', `Bearer ${token}`)            .send({ query: `mutation{                                deleteDish(id: "${idDish}"){                                    id,                                    title,                                    img,                                    price,                                    weight                                }                            }`})            .expect(200)            .end((err,res) => {                if (err) return done(err);                res.body.should.be.a('object');                res.body.data.deleteDish.should.have.property('id').eql(idDish);                res.body.data.deleteDish.should.have.property('title');                res.body.data.deleteDish.should.have.property('img');                res.body.data.deleteDish.should.have.property('price');                res.body.data.deleteDish.should.have.property('weight');                done();            })    });});