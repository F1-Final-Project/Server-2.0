const chai = require('chai');const graphql = require('graphql');const url = `https://f1-graphql-server.herokuapp.com`;const request = require('supertest')(url);const userType = require('../graphql/schema/user');const should = chai.should();const expect = chai.expect;describe('User Schema', () => {    it('it should have an id field of type ID', () => {        expect(userType.getFields()).to.have.property('id');        expect(userType.getFields().id.type).to.deep.equals(graphql.GraphQLID);    });    it('it should have an email field of type String', () => {        expect(userType.getFields()).to.have.property('email');        expect(userType.getFields().email.type).to.deep.equals(graphql.GraphQLString);    });    it('it should have a firstName field of type String', () => {        expect(userType.getFields()).to.have.property('firstName');        expect(userType.getFields().firstName.type).to.deep.equals(graphql.GraphQLString);    });    it('it should have a lastName field of type String', () => {        expect(userType.getFields()).to.have.property('lastName');        expect(userType.getFields().lastName.type).to.deep.equals(graphql.GraphQLString);    });    it('it should have a permission field of type String', () => {        expect(userType.getFields()).to.have.property('permission');        expect(userType.getFields().permission.type).to.deep.equals(graphql.GraphQLString);    });});describe('User Query', () => {    let token;    before((done) => {        request.post('/graphql')            .send({ query: '{ login(email:"admin@test.com",password:"1111"){ token }}'})            .expect(200)            .end((err,res) => {                if (err) return done(err);                token = res.body.data.login.token;                done();            });    });    it('it should return (userAll)', (done) => {        request.post('/graphql')            .set('Authorization', `Bearer ${token}`)            .send({ query: '{ userAll { id, email, firstName, lastName, permission } }'})            .expect(200)            .end((err,res) => {                if (err) return done(err);                res.body.should.be.a('object');                res.body.data.userAll.should.be.a('array');                res.body.data.userAll[0].should.have.property('id');                res.body.data.userAll[0].should.have.property('email');                res.body.data.userAll[0].should.have.property('firstName');                res.body.data.userAll[0].should.have.property('lastName');                res.body.data.userAll[0].should.have.property('permission');                done();            })    });    it('it should not return (user) without auth token', (done) => {        request.post('/graphql')            .send({ query: '{ user(id:"5dd0713430a9086cae1b76b4") { id } }'})            .expect(200)            .end((err,res) => {                if (err) return done(err);                res.body.errors.should.be.a('array');                res.body.errors[0].should.have.property('message').eql('Unauthenticated!');                done();            })    });    it('it should return (user) by id', (done) => {        request.post('/graphql')            .set('Authorization', `Bearer ${token}`)            .send({ query: '{ user(id:"5dd0713430a9086cae1b76b4") { id, email, firstName, lastName, permission } }'})            .expect(200)            .end((err,res) => {                if (err) return done(err);                res.body.should.be.a('object');                res.body.data.user.should.have.property('id');                res.body.data.user.should.have.property('email');                res.body.data.user.should.have.property('firstName');                res.body.data.user.should.have.property('lastName');                res.body.data.user.should.have.property('permission');                done();            })    });});describe('User Mutation', () => {    let idUser;    let token;    before((done) => {        request.post('/graphql')            .send({ query: '{ login(email:"admin@test.com",password:"1111"){ token }}'})            .expect(200)            .end((err,res) => {                if (err) return done(err);                token = res.body.data.login.token;                done();            });    });    it('it should not return (addUser) without auth token', (done) => {        request.post('/graphql')            .send({ query: `mutation{ addUser(                                    email: "test@test.com",                                     password: "test123",                                     firstName: "Test",                                     lastName: "Test",                                     permission: "admin") {email}                                }`})            .expect(200)            .end((err,res) => {                if (err) return done(err);                res.body.errors.should.be.a('array');                res.body.errors[0].should.have.property('message').eql('Unauthenticated!');                done();            })    });    it('it should return (addUser)', (done) => {        request.post('/graphql')            .set('Authorization', `Bearer ${token}`)            .send({ query: `mutation{                                addUser(email: "test@test.com",                                        password: "test123",                                        firstName: "Test",                                        lastName: "Test",                                        permission: "admin"                                ) {                                    id,                                    email,                                    firstName,                                    lastName,                                    permission                                }                            }`})            .expect(200)            .end((err,res) => {                if (err) return done(err);                res.body.should.be.a('object');                res.body.data.addUser.should.have.property('id');                res.body.data.addUser.should.have.property('email').eql('test@test.com');                res.body.data.addUser.should.have.property('firstName').eql('Test');                res.body.data.addUser.should.have.property('lastName').eql('Test');                res.body.data.addUser.should.have.property('permission').eql('admin');                idUser = res.body.data.addUser.id;                done();            })    });    it('it should return (updateUser)', (done) => {        request.post('/graphql')            .set('Authorization', `Bearer ${token}`)            .send({ query: `mutation{                                 updateUser(id: "${idUser}",                                            email: "test@test.com",                                            password: "test123",                                                firstName: "Test2",                                            lastName: "Test2",                                            permission: "admin") {                                    id                                    email                                    firstName                                    lastName                                    permission                                }                            }`})            .expect(200)            .end((err,res) => {                if (err) return done(err);                res.body.should.be.a('object');                res.body.data.updateUser.should.have.property('id').eql(idUser);                res.body.data.updateUser.should.have.property('email').eql('test@test.com');                res.body.data.updateUser.should.have.property('firstName').eql('Test2');                res.body.data.updateUser.should.have.property('lastName').eql('Test2');                res.body.data.updateUser.should.have.property('permission').eql('admin');                done();            })    });    it('it should return (deleteUser)', (done) => {        request.post('/graphql')            .set('Authorization', `Bearer ${token}`)            .send({ query: `mutation{                                deleteUser(id: "${idUser}"){                                    id,                                    email,                                    firstName,                                    lastName,                                    permission                                }                            }`})            .expect(200)            .end((err,res) => {                if (err) return done(err);                res.body.should.be.a('object');                res.body.data.deleteUser.should.have.property('id').eql(idUser);                res.body.data.deleteUser.should.have.property('email').eql('test@test.com');                res.body.data.deleteUser.should.have.property('firstName').eql('Test2');                res.body.data.deleteUser.should.have.property('lastName').eql('Test2');                res.body.data.deleteUser.should.have.property('permission').eql('admin');                done();            })    });});