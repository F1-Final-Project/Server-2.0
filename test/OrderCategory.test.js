const chai = require('chai');const graphql = require('graphql');const url = `https://f1-graphql-server.herokuapp.com`;const request = require('supertest')(url);const orderCategoryType = require('../graphql/schema/orderCategory');const should = chai.should();const expect = chai.expect;describe('OrderCategory Schema', () => {    it('it should have an id field of type ID', () => {        expect(orderCategoryType.getFields()).to.have.property('id');        expect(orderCategoryType.getFields().id.type).to.deep.equals(graphql.GraphQLID);    });    it('it should have a title field of type String', () => {        expect(orderCategoryType.getFields()).to.have.property('title');        expect(orderCategoryType.getFields().title.type).to.deep.equals(graphql.GraphQLString);    });});describe('OrderCategory Query', () => {    let token;    before((done) => {        request.post('/graphql')            .send({ query: '{ login(email:"admin@test.com",password:"1111"){ token }}'})            .expect(200)            .end((err,res) => {                if (err) return done(err);                token = res.body.data.login.token;                done();            });    });    it('it should return (orderCategoryAll)', (done) => {        request.post('/graphql')            .set('Authorization', `Bearer ${token}`)            .send({ query: '{ orderCategoryAll { id, title } }'})            .expect(200)            .end((err,res) => {                if (err) return done(err);                res.body.should.be.a('object');                res.body.data.orderCategoryAll.should.be.a('array');                res.body.data.orderCategoryAll[0].should.have.property('id');                res.body.data.orderCategoryAll[0].should.have.property('title');                done();            })    });    it('it should not return (orderCategory) without auth token', (done) => {        request.post('/graphql')            .send({ query: '{ orderCategory(id:"5dde5cec34c8db8dfb7d0cb6") { id } }'})            .expect(200)            .end((err,res) => {                if (err) return done(err);                res.body.errors.should.be.a('array');                res.body.errors[0].should.have.property('message').eql('Unauthenticated!');                done();            })    });    it('it should return (orderCategory) by id', (done) => {        request.post('/graphql')            .set('Authorization', `Bearer ${token}`)            .send({ query: '{ orderCategory(id:"5dde5cec34c8db8dfb7d0cb6") { id, title } }'})            .expect(200)            .end((err,res) => {                if (err) return done(err);                res.body.should.be.a('object');                res.body.data.orderCategory.should.have.property('id');                res.body.data.orderCategory.should.have.property('title');                done();            })    });});describe('OrderCategory Mutation', () => {    let idOrderCategory;    let token;    before((done) => {        request.post('/graphql')            .send({ query: '{ login(email:"admin@test.com",password:"1111"){ token }}'})            .expect(200)            .end((err,res) => {                if (err) return done(err);                token = res.body.data.login.token;                done();            });    });    it('it should not return (addOrderCategory) without auth token', (done) => {        request.post('/graphql')            .send({ query: `mutation{ addOrderCategory(title: "1") {id, title} }`})            .expect(200)            .end((err,res) => {                if (err) return done(err);                res.body.errors.should.be.a('array');                res.body.errors[0].should.have.property('message').eql('Unauthenticated!');                done();            })    });    it('it should return (addOrderCategory)', (done) => {        request.post('/graphql')            .set('Authorization', `Bearer ${token}`)            .send({ query: `mutation{                                addOrderCategory(title: "test") {                                    id,                                    title                                }                            }`})            .expect(200)            .end((err,res) => {                if (err) return done(err);                res.body.should.be.a('object');                res.body.data.addOrderCategory.should.have.property('id');                res.body.data.addOrderCategory.should.have.property('title').eql('test');                idOrderCategory = res.body.data.addOrderCategory.id;                done();            })    });    it('it should return (updateOrderCategory)', (done) => {        request.post('/graphql')            .set('Authorization', `Bearer ${token}`)            .send({ query: `mutation{                                 updateOrderCategory(id: "${idOrderCategory}", title: "test2") {                                    id,                                    title                                }                            }`})            .expect(200)            .end((err,res) => {                if (err) return done(err);                res.body.should.be.a('object');                res.body.data.updateOrderCategory.should.have.property('id').eql(idOrderCategory);                res.body.data.updateOrderCategory.should.have.property('title').eql('test2');                done();            })    });    it('it should return (deleteOrderCategory)', (done) => {        request.post('/graphql')            .set('Authorization', `Bearer ${token}`)            .send({ query: `mutation{                                deleteOrderCategory(id: "${idOrderCategory}"){                                    id,                                    title                                }                            }`})            .expect(200)            .end((err,res) => {                if (err) return done(err);                res.body.should.be.a('object');                res.body.data.deleteOrderCategory.should.have.property('id').eql(idOrderCategory);                res.body.data.deleteOrderCategory.should.have.property('title').eql('test2');                done();            })    });});