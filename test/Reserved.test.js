const chai = require('chai');const graphql = require('graphql');const url = `https://f1-graphql-server.herokuapp.com`;const request = require('supertest')(url);const reservedType = require('../graphql/schema/reserved');const should = chai.should();const expect = chai.expect;describe('Reserved Schema', () => {    it('it should have an id field of type ID', () => {        expect(reservedType.getFields()).to.have.property('id');        expect(reservedType.getFields().id.type).to.deep.equals(graphql.GraphQLID);    });    it('it should have a client field of type String', () => {        expect(reservedType.getFields()).to.have.property('client');        expect(reservedType.getFields().client.type).to.deep.equals(graphql.GraphQLString);    });    it('it should have a phone field of type String', () => {        expect(reservedType.getFields()).to.have.property('phone');        expect(reservedType.getFields().phone.type).to.deep.equals(graphql.GraphQLString);    });    it('it should have a date field of type String', () => {        expect(reservedType.getFields()).to.have.property('date');        expect(reservedType.getFields().date.type).to.deep.equals(graphql.GraphQLString);    });    it('it should have a table field of type Int', () => {        expect(reservedType.getFields()).to.have.property('table');        expect(reservedType.getFields().table.type).to.deep.equals(graphql.GraphQLInt);    });});describe('Reserved Query', () => {    let token;    before((done) => {        request.post('/graphql')            .send({ query: '{ login(email:"admin@test.com",password:"1111"){ token }}'})            .expect(200)            .end((err,res) => {                if (err) return done(err);                token = res.body.data.login.token;                done();            });    });    it('it should return (reservedAll)', (done) => {        request.post('/graphql')            .set('Authorization', `Bearer ${token}`)            .send({ query: '{ reservedAll { id, client, phone, date, table } }'})            .expect(200)            .end((err,res) => {                if (err) return done(err);                res.body.should.be.a('object');                res.body.data.reservedAll.should.be.a('array');                res.body.data.reservedAll[0].should.have.property('id');                res.body.data.reservedAll[0].should.have.property('client');                res.body.data.reservedAll[0].should.have.property('phone');                res.body.data.reservedAll[0].should.have.property('date');                res.body.data.reservedAll[0].should.have.property('table');                done();            })    });    it('it should not return (reserved) without auth token', (done) => {        request.post('/graphql')            .send({ query: '{ reserved(id:"5dd31f81d55c9a23c484041c") { id } }'})            .expect(200)            .end((err,res) => {                if (err) return done(err);                res.body.errors.should.be.a('array');                res.body.errors[0].should.have.property('message').eql('Unauthenticated!');                done();            })    });    it('it should return (reserved) by id', (done) => {        request.post('/graphql')            .set('Authorization', `Bearer ${token}`)            .send({ query: '{ reserved(id:"5dd31f81d55c9a23c484041c") { id, client, phone, date, table } }'})            .expect(200)            .end((err,res) => {                if (err) return done(err);                res.body.should.be.a('object');                res.body.data.reserved.should.have.property('id');                res.body.data.reserved.should.have.property('client');                res.body.data.reserved.should.have.property('phone');                res.body.data.reserved.should.have.property('date');                res.body.data.reserved.should.have.property('table');                done();            })    });});describe('Reserved Mutation', () => {    let idReserved;    let token;    before((done) => {        request.post('/graphql')            .send({ query: '{ login(email:"admin@test.com",password:"1111"){ token }}'})            .expect(200)            .end((err,res) => {                if (err) return done(err);                token = res.body.data.login.token;                done();            });    });    it('it should not return (addReserved) without auth token', (done) => {        request.post('/graphql')            .send({ query: `mutation{ addReserved(date: "Wed Dec 25 2019 21:57:44 GMT+0200 (Восточная Европа, стандартное время)", table: 10,client: "1", phone: "1") { table }}`})            .expect(200)            .end((err,res) => {                if (err) return done(err);                res.body.errors.should.be.a('array');                res.body.errors[0].should.have.property('message').eql('Unauthenticated!');                done();            })    });    it('it should return (addReserved)', (done) => {        request.post('/graphql')            .set('Authorization', `Bearer ${token}`)            .send({ query: `mutation{ addReserved(date: "Wed Dec 25 2019 21:57:44 GMT+0200 (Восточная Европа, стандартное время)", table: 10, client: "1", phone: "1") { id, table, client, phone }}`})            .expect(200)            .end((err,res) => {                if (err) return done(err);                res.body.should.be.a('object');                res.body.data.addReserved.should.have.property('id');                res.body.data.addReserved.should.have.property('table').eql(10);                res.body.data.addReserved.should.have.property('client').eql('1');                res.body.data.addReserved.should.have.property('phone').eql('1');                idReserved = res.body.data.addReserved.id;                done();            })    });    it('it should return (deleteReserved)', (done) => {        request.post('/graphql')            .set('Authorization', `Bearer ${token}`)            .send({ query: `mutation{                                deleteReserved(id: "${idReserved}"){                                    id,                                    date,                                    table,                                     client,                                     phone                                }                            }`})            .expect(200)            .end((err,res) => {                if (err) return done(err);                res.body.should.be.a('object');                res.body.data.deleteReserved.should.have.property('id').eql(idReserved);                res.body.data.deleteReserved.should.have.property('date');                res.body.data.deleteReserved.should.have.property('table');                res.body.data.deleteReserved.should.have.property('client');                res.body.data.deleteReserved.should.have.property('phone');                done();            })    });});