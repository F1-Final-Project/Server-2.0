const chai = require('chai');const graphql = require('graphql');const url = `https://f1-graphql-server.herokuapp.com`;const request = require('supertest')(url);const orderIngredientType = require('../graphql/schema/orderIngredient');const ingredientType = require('../graphql/schema/ingredient');const orderCategoryType = require('../graphql/schema/orderCategory');const should = chai.should();const expect = chai.expect;describe('OrderIngredient Schema', () => {    it('it should have an id field of type ID', () => {        expect(orderIngredientType.getFields()).to.have.property('id');        expect(orderIngredientType.getFields().id.type).to.deep.equals(graphql.GraphQLID);    });    it('it should have an order field of type Array of type Ingredient', () => {        expect(orderIngredientType.getFields()).to.have.property('order');        expect(orderIngredientType.getFields().order.type).to.deep.equals(graphql.GraphQLList(ingredientType));    });    it('it should have an orderCategory field of type OrderCategory', () => {        expect(orderIngredientType.getFields()).to.have.property('orderCategory');        expect(orderIngredientType.getFields().orderCategory.type).to.deep.equals(orderCategoryType);    });    it('it should have an editingOrder field of type Boolean', () => {        expect(orderIngredientType.getFields()).to.have.property('editingOrder');        expect(orderIngredientType.getFields().editingOrder.type).to.deep.equals(graphql.GraphQLBoolean);    });    it('it should have a pendingOrder field of type Boolean', () => {        expect(orderIngredientType.getFields()).to.have.property('pendingOrder');        expect(orderIngredientType.getFields().pendingOrder.type).to.deep.equals(graphql.GraphQLBoolean);    });    it('it should have an orderHasArrived field of type Boolean', () => {        expect(orderIngredientType.getFields()).to.have.property('orderHasArrived');        expect(orderIngredientType.getFields().orderHasArrived.type).to.deep.equals(graphql.GraphQLBoolean);    });});describe('OrderIngredient Query', () => {    let token;    before((done) => {        request.post('/graphql')            .send({ query: '{ login(email:"admin@test.com",password:"1111"){ token }}'})            .expect(200)            .end((err,res) => {                if (err) return done(err);                token = res.body.data.login.token;                done();            });    });    it('it should return (orderIngredientAll)', (done) => {        request.post('/graphql')            .set('Authorization', `Bearer ${token}`)            .send({ query: '{ orderIngredientAll { id, pendingOrder, orderHasArrived } }'})            .expect(200)            .end((err,res) => {                if (err) return done(err);                res.body.should.be.a('object');                res.body.data.orderIngredientAll.should.be.a('array');                res.body.data.orderIngredientAll[0].should.have.property('id');                res.body.data.orderIngredientAll[0].should.have.property('pendingOrder');                res.body.data.orderIngredientAll[0].should.have.property('orderHasArrived');                done();            })    });    it('it should not return (orderIngredient) without auth token', (done) => {        request.post('/graphql')            .send({ query: '{ orderIngredient(id:"5dfc792d0fa8ca0004bd2dee") { id } }'})            .expect(200)            .end((err,res) => {                if (err) return done(err);                res.body.errors.should.be.a('array');                res.body.errors[0].should.have.property('message').eql('Unauthenticated!');                done();            })    });    it('it should return (orderIngredient) by id', (done) => {        request.post('/graphql')            .set('Authorization', `Bearer ${token}`)            .send({ query: '{ orderIngredient(id:"5dfc792d0fa8ca0004bd2dee") { id, pendingOrder, orderHasArrived } }'})            .expect(200)            .end((err,res) => {                if (err) return done(err);                res.body.should.be.a('object');                res.body.data.orderIngredient.should.have.property('id');                res.body.data.orderIngredient.should.have.property('pendingOrder');                res.body.data.orderIngredient.should.have.property('orderHasArrived');                done();            })    });});describe('OrderIngredient Mutation', () => {    let token;    before((done) => {        request.post('/graphql')            .send({ query: '{ login(email:"admin@test.com",password:"1111"){ token }}'})            .expect(200)            .end((err,res) => {                if (err) return done(err);                token = res.body.data.login.token;                done();            });    });    it('it should not return (addOrderIngredient) without auth token', (done) => {        request.post('/graphql')            .send({ query: `mutation{ addOrderIngredient(order: ["1"],                                                         orderCategory: "1" ,                                                         editingOrder: false,                                                         pendingOrder: false,                                                         orderHasArrived: false) {pendingOrder, orderHasArrived}                                    }`})            .expect(200)            .end((err,res) => {                if (err) return done(err);                res.body.errors.should.be.a('array');                res.body.errors[0].should.have.property('message').eql('Unauthenticated!');                done();            })    });});