const graphql = require('graphql');const {    GraphQLString,    GraphQLID,    GraphQLNonNull,    GraphQLFloat,    GraphQLList,    GraphQLInputObjectType,} = graphql;const InvoiceType = require('../../../schema/invoice');const Invoice = require('db-worker/lib/models/invoice');const InvoiceItemInputType = new GraphQLInputObjectType({    name: 'InvoiceItemInput',    fields: () => ({        title: {type: GraphQLString},        price: {type: GraphQLFloat},    })});module.exports = {    addInvoice: {        type: InvoiceType,        args: {            invoiceItems: {type: GraphQLNonNull(GraphQLList(InvoiceItemInputType))},            invoicePrice: {type: GraphQLNonNull(GraphQLFloat)},            staff: {type: GraphQLNonNull(GraphQLString)},            paymentMethod: {type: GraphQLNonNull(GraphQLString)},            created_at: {type: GraphQLNonNull(GraphQLString)}        },        resolve: async (parent, args, req) => {            if (!req.isAuth) {                throw new Error('Unauthenticated!')            }            try {                const invoice = new Invoice({                    invoiceItems: args.invoiceItems,                    invoicePrice: args.invoicePrice,                    staff: args.staff,                    paymentMethod: args.paymentMethod,                    created_at: new Date(args.created_at),                });                return invoice.save();            } catch (err) {                throw err;            }        },    },    deleteInvoice: {        type: InvoiceType,        args: {            id: {type: GraphQLNonNull(GraphQLID)}        },        resolve: async (parent, args, req) => {            if (!req.isAuth) {                throw new Error('Unauthenticated!')            }            try {                return Invoice.findByIdAndRemove(args.id);            } catch (err) {                throw err;            }        }    },    updateInvoice: {        type: InvoiceType,        args: {            id: {type: GraphQLNonNull(GraphQLID)},            invoiceItems: {type: GraphQLNonNull(GraphQLList(InvoiceItemInputType))},            invoicePrice: {type: GraphQLNonNull(GraphQLFloat)},            staff: {type: GraphQLNonNull(GraphQLString)},            paymentMethod: {type: GraphQLNonNull(GraphQLString)},            created_at: {type: GraphQLNonNull(GraphQLString)}        },        resolve: async (parent, args, req) => {            if (!req.isAuth) {                throw new Error('Unauthenticated!')            }            try {                const invoice = {                    invoiceItems: args.invoiceItems,                    invoicePrice: args.invoicePrice,                    staff: args.staff,                    paymentMethod: args.paymentMethod,                    created_at: new Date(args.created_at),                };                return Invoice.findByIdAndUpdate(                    args.id,                    {$set: invoice},                    {new: true},                )            } catch (err) {                throw err;            }        }    },};