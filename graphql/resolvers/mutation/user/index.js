const graphql = require('graphql');const {    GraphQLString,    GraphQLID,    GraphQLNonNull} = graphql;const UserType = require('../../../schema/user');const User = require('db-worker/lib/models/user');module.exports = {    addUser: {        type: UserType,        args: {            email: {type: GraphQLNonNull(GraphQLString)},            password: {type: GraphQLNonNull(GraphQLString)},            firstName: {type: GraphQLNonNull(GraphQLString)},            lastName: {type: GraphQLNonNull(GraphQLString)},            permission: {type: GraphQLNonNull(GraphQLString)},        },        resolve: async (parent, args, req) => {            if (!req.isAuth) {                throw new Error('Unauthenticated!')            }            try {                const user = new User({                    email: args.email,                    password: args.password,                    firstName: args.firstName,                    lastName: args.lastName,                    permission: args.permission,                });                return user.save();            } catch (err) {                throw err;            }        },    },    deleteUser: {        type: UserType,        args: {            id: {type: GraphQLID}        },        resolve: async (parent, args, req) => {            if (!req.isAuth) {                throw new Error('Unauthenticated!')            }            try {                return User.findByIdAndRemove(args.id);            } catch (err) {                throw err;            }        }    },    updateUser: {        type: UserType,        args: {            id: {type: GraphQLNonNull(GraphQLID)},            email: {type: GraphQLNonNull(GraphQLString)},            password: {type: GraphQLNonNull(GraphQLString)},            firstName: {type: GraphQLNonNull(GraphQLString)},            lastName: {type: GraphQLNonNull(GraphQLString)},            permission: {type: GraphQLNonNull(GraphQLString)},        },        resolve: async (parent, args, req) => {            if (!req.isAuth) {                throw new Error('Unauthenticated!')            }            try {                const user = {                    email: args.email,                    password: args.password,                    firstName: args.firstName,                    lastName: args.lastName,                    permission: args.permission,                };                return User.findByIdAndUpdate(                    args.id,                    {$set: user},                    {new: true},                )            } catch (err) {                throw err;            }        }    },};