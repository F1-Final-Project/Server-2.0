const graphql = require('graphql');const {    GraphQLString,    GraphQLID,    GraphQLNonNull,    GraphQLList,    GraphQLFloat,} = graphql;const DishType = require('../../../schema/dish');const Dish = require('db-worker/lib/models/dish');module.exports = {    addDish: {        type: DishType,        args: {            title: {type: GraphQLNonNull(GraphQLString)},            description: {type: GraphQLNonNull(GraphQLString)},            img: {type: GraphQLNonNull(GraphQLString)},            category: {type: GraphQLNonNull(GraphQLID)},            ingredients: {type: GraphQLNonNull(GraphQLList(GraphQLID))},            additionalIngredients: {type: GraphQLNonNull(GraphQLList(GraphQLID))},            price: {type: GraphQLNonNull(GraphQLFloat)},            weight: {type: GraphQLNonNull(GraphQLFloat)},        },        resolve: async (parent, args, req) => {            if (!req.isAuth) {                throw new Error('Unauthenticated!')            }            try {                const dish = new Dish({                    title: args.title,                    description: args.description,                    img: args.img,                    category: args.category,                    ingredients: args.ingredients,                    additionalIngredients: args.additionalIngredients,                    price: args.price,                    weight: args.weight,                });                return dish.save();            } catch (err) {                throw err;            }        },    },    deleteDish: {        type: DishType,        args: {            id: {type: GraphQLID}        },        resolve: async (parent, args, req) => {            if (!req.isAuth) {                throw new Error('Unauthenticated!')            }            try {                return Dish.findByIdAndRemove(args.id);            } catch (err) {                throw err;            }        }    },    updateDish: {        type: DishType,        args: {            id: {type: GraphQLNonNull(GraphQLID)},            title: {type: GraphQLNonNull(GraphQLString)},            description: {type: GraphQLNonNull(GraphQLString)},            img: {type: GraphQLNonNull(GraphQLString)},            category: {type: GraphQLNonNull(GraphQLID)},            ingredients: {type: GraphQLNonNull(GraphQLList(GraphQLID))},            additionalIngredients: {type: GraphQLNonNull(GraphQLList(GraphQLID))},            price: {type: GraphQLNonNull(GraphQLFloat)},            weight: {type: GraphQLNonNull(GraphQLFloat)},        },        resolve: async (parent, args, req) => {            if (!req.isAuth) {                throw new Error('Unauthenticated!')            }            try {                const dish = {                    title: args.title,                    description: args.description,                    img: args.img,                    category: args.category,                    ingredients: args.ingredients,                    additionalIngredients: args.additionalIngredients,                    price: args.price,                    weight: args.weight,                };                return Dish.findByIdAndUpdate(                    args.id,                    {$set: dish},                    {new: true},                )            } catch (err) {                throw err;            }        }    },};