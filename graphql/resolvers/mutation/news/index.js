const graphql = require('graphql');const {    GraphQLString,    GraphQLID,    GraphQLNonNull} = graphql;const NewsType = require('../../../schema/news');const News = require('db-worker/lib/models/news');module.exports = {    addNews: {        type: NewsType,        args: {            title: {type: GraphQLNonNull(GraphQLString)},            text: {type: GraphQLNonNull(GraphQLString)},            img: {type: GraphQLNonNull(GraphQLString)},            created_at: {type: GraphQLNonNull(GraphQLString)},        },        resolve: async (parent, args, req) => {            if (!req.isAuth) {                throw new Error('Unauthenticated!')            }            try {                const news = new News({                    title: args.title,                    text: args.text,                    img: args.img,                    created_at: new Date(args.created_at),                });                return news.save();            } catch (err) {                throw err;            }        },    },    deleteNews: {        type: NewsType,        args: {            id: {type: GraphQLNonNull(GraphQLID)}        },        resolve: async (parent, args, req) => {            if (!req.isAuth) {                throw new Error('Unauthenticated!')            }            try {                return News.findByIdAndRemove(args.id);            } catch (err) {                throw err;            }        }    },    updateNews: {        type: NewsType,        args: {            id: {type: GraphQLNonNull(GraphQLID)},            title: {type: GraphQLNonNull(GraphQLString)},            text: {type: GraphQLNonNull(GraphQLString)},            img: {type: GraphQLNonNull(GraphQLString)},            created_at: {type: GraphQLNonNull(GraphQLString)},        },        resolve: async (parent, args, req) => {            if (!req.isAuth) {                throw new Error('Unauthenticated!')            }            try {                const news = {                    title: args.title,                    text: args.text,                    img: args.img,                    created_at: new Date(args.created_at),                };                return News.findByIdAndUpdate(                    args.id,                    {$set: news},                    {new: true},                )            } catch (err) {                throw err;            }        }    },};