const graphql = require('graphql');const {    GraphQLID,    GraphQLNonNull,    GraphQLList,    GraphQLBoolean,} = graphql;const OrderIngredientType = require('../../../schema/orderIngredient');const OrderIngredient = require('db-worker/lib/models/orderIngredient');module.exports = {    addOrderIngredient: {        type: OrderIngredientType,        args: {            order: {type: GraphQLNonNull(GraphQLList(GraphQLID))},            orderCategory: {type: GraphQLNonNull(GraphQLID)},            editingOrder: {type: GraphQLNonNull(GraphQLList(GraphQLBoolean))},            pendingOrder: {type: GraphQLNonNull(GraphQLList(GraphQLBoolean))},            orderHasArrived: {type: GraphQLNonNull(GraphQLList(GraphQLBoolean))},        },        resolve: async (parent, args, req) => {            if (!req.isAuth) {                throw new Error('Unauthenticated!')            }            try {                const orderIngredient = new OrderIngredient({                    order: args.order,                    orderCategory: args.orderCategory,                    editingOrder: args.editingOrder,                    pendingOrder: args.pendingOrder,                    orderHasArrived: args.orderHasArrived,                });                return orderIngredient.save();            } catch (err) {                throw err;            }        },    },    deleteOrderIngredient: {        type: OrderIngredientType,        args: {            id: {type: GraphQLNonNull(GraphQLID)}        },        resolve: async (parent, args, req) => {            if (!req.isAuth) {                throw new Error('Unauthenticated!')            }            try {                return OrderIngredient.findByIdAndRemove(args.id);            } catch (err) {                throw err;            }        }    },    updateOrderIngredient: {        type: OrderIngredientType,        args: {            id: {type: GraphQLNonNull(GraphQLID)},            order: {type: GraphQLNonNull(GraphQLList(GraphQLID))},            orderCategory: {type: GraphQLNonNull(GraphQLID)},            editingOrder: {type: GraphQLNonNull(GraphQLList(GraphQLBoolean))},            pendingOrder: {type: GraphQLNonNull(GraphQLList(GraphQLBoolean))},            orderHasArrived: {type: GraphQLNonNull(GraphQLList(GraphQLBoolean))},        },        resolve: async (parent, args, req) => {            if (!req.isAuth) {                throw new Error('Unauthenticated!')            }            try {                const orderIngredient = {                    order: args.order,                    orderCategory: args.orderCategory,                    editingOrder: args.editingOrder,                    pendingOrder: args.pendingOrder,                    orderHasArrived: args.orderHasArrived,                };                return OrderIngredient.findByIdAndUpdate(                    args.id,                    {$set: orderIngredient},                    {new: true},                )            } catch (err) {                throw err;            }        }    },};