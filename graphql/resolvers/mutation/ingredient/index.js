const graphql = require('graphql');const {    GraphQLString,    GraphQLID,    GraphQLNonNull,    GraphQLInt,    GraphQLFloat} = graphql;const IngredientType = require('../../../schema/ingredient');const Ingredient = require('db-worker/lib/models/ingredient');module.exports = {    addIngredient: {        type: IngredientType,        args: {            title: {type: GraphQLNonNull(GraphQLString)},            restInStock: {type: GraphQLNonNull(GraphQLInt)},            description: {type: GraphQLNonNull(GraphQLString)},            price: {type: GraphQLNonNull(GraphQLFloat)},        },        resolve: async (parent, args, req) => {            if (!req.isAuth) {                throw new Error('Unauthenticated!')            }            try {                const ingredient = new Ingredient({                    title: args.title,                    restInStock: args.restInStock,                    description: args.description,                    price: args.price,                });                return ingredient.save();            } catch (err) {                throw err;            }        },    },    deleteIngredient: {        type: IngredientType,        args: {            id: {type: GraphQLID}        },        resolve: async (parent, args, req) => {            if (!req.isAuth) {                throw new Error('Unauthenticated!')            }            try {                return Ingredient.findByIdAndRemove(args.id);            } catch (err) {                throw err;            }        }    },    updateIngredient: {        type: IngredientType,        args: {            id: {type: GraphQLNonNull(GraphQLID)},            title: {type: GraphQLNonNull(GraphQLString)},            restInStock: {type: GraphQLNonNull(GraphQLInt)},            description: {type: GraphQLNonNull(GraphQLString)},            price: {type: GraphQLNonNull(GraphQLFloat)},        },        resolve: async (parent, args, req) => {            if (!req.isAuth) {                throw new Error('Unauthenticated!')            }            try {                const ingredient = {                    title: args.title,                    restInStock: args.restInStock,                    description: args.description,                    price: args.price,                };                return Ingredient.findByIdAndUpdate(                    args.id,                    {$set: ingredient},                    {new: true},                )            } catch (err) {                throw err;            }        }    },};